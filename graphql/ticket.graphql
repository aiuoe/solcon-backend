type Ticket 
{
  id: ID!
  user_id: [User!]! @belongsToMany(relation: "users")
  title: String!
  message: String!
  priority: Boolean!
  status: Boolean!
  pinned: Boolean!
  public: Boolean!
  channel: String!
  due_date: Date
  created_at: Date!
  updated_at: Date!
  Ncomments: Int @count(relation: "comments")
  comments: [Comment!]! @hasMany
}

input ticketUpsert
{
  id: ID
  users: [ID!]
  title: String! @lower
  message: String! @lower
  priority: Boolean!
  status: Boolean!
  pinned: Boolean!
  public: Boolean!
  channel: String!
  due_date: Date
}

extend type Query
{
  tickets(page: Int): [Ticket!]! @paginateAuth
  # ticket(id: ID! @eq): Ticket! @find
}

extend type Mutation
{
  ticketUpsert(input: ticketUpsert! @spread): Ticket! @field(resolver: "TicketMutation@upsert")
  # ticketUpdate(input: ticketUpdate! @spread): Ticket! @field(resolver: "TicketMutation@update")
  ticketDelete(id: ID! @rules(apply: ["has:tickets"]) @eq): Ticket @delete
}

