enum SEX 
{
  male
  female
}

enum SOCIAL_STATE 
{
  single
  married
  divorced
  widower
}

type User 
{
  id: ID!
  relationship_id: Relationship! @belongsTo(relation: "relationship")
  language_id: Language! @belongsTo(relation: "language")
  origin_id: Origin! @belongsTo(relation: "origin")
  role_id: Role! @belongsTo(relation: "roles")
  name: String!
  lastname: String!
  email: String!
  sex: SEX
  dni: String
  rif: String
  birth_date: Date
  social_state: SOCIAL_STATE
  refd: Int!
  ext: Int
  created_at: Date!
  updated_at: Date!
  pivot: TicketPivot
  Ncompanies: Int @count(relation: "companies")
  Ntickets: Int @count(relation: "tickets")
}

type TicketPivot
{
  created_by: Boolean
  updated_by: Boolean
  closed_by: Boolean
}

input userUpdate
{
  id: ID! @rules(apply: ["auth"])
  language_id: ID!
  org_id: ID!
  relp_id: ID!
  name: String! 
  lastname: String!
  email: String!
  sex: SEX 
  dni: String
  rif: String
  dob: DateTime
  sos: SOS
  refd: Int!
  ext: Int
}

extend type Query
{
  me: User! @auth
  users: [User!]! @paginate(defaultCount: 10) @admin
  user(id: ID! @eq): User! @find @admin
}

extend type Mutation
{
  userUpdate(input: userUpdate @lower @spread): User! @update
  userDelete(id: ID! @rules(apply: ["auth"]) @eq): User @delete @admin

  userUpgrade(id: ID!): User! @field(resolver: "UserMutation@upgrade")
  userDowngrade(id: ID!): User! @field(resolver: "UserMutation@downgrade")
}

extend type Subscription
{
  userUpdated: User
}